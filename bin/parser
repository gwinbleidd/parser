#!/usr/bin/env ruby

require 'optparse'
require File.expand_path('../config/environment.rb')

params = ARGV.getopts('h', 'l', 'i')

if params['h']
  puts "usage: #{File.basename(__FILE__)} [-h|-l|-i dictionary_name]\n",
       "  -h = print this message\n",
       "  -l = load existing files\n",
       "  -i = initialize dictionary"
elsif params['i']
  puts "  Initializes new dictionary\n",
       "   creates structures in database"
elsif params['l']
  inp = Dictionary::InputFile.new

  inp.config.each do |c|
    conf = Dictionary::Configuration.new(c)

    dict = Dictionary::Record.new(conf.config)

    records = dict.records

    mdls = Dictionary::Model.new(conf.table)

    mdls.objects.each { |o|
      records.each do |record_key, record_value|
        size = record_value[o.to_s.downcase.sub(conf.name, '').to_sym].size
        case size
          when 10 ... 1000 then mod = 5
          when 1000 ... 10000 then mod = 100
          when 10000 ... 50000 then mod = 500
          else
            mod = 1
        end

        i = 0

        record_value[o.to_s.downcase.sub(conf.name, '').to_sym].each { |k, v|
          i += 1
          if i == size
            puts "#{o.to_s.gsub(conf.name.to_s.capitalize, '')}: Processing #{i} of #{size} records\n"
          else
            print "Processing #{i} of #{size} records\r" if i % mod == 0
          end
          rec = o.find_by v

          if rec.nil?
            o.create v
          end
        }
      end
    }

    out = Dictionary::OutputFile.new(conf)

    out.start
  end

  inp.finalize
else
  puts "usage: #{File.basename(__FILE__)} [-h|-l|-i dictionary_name]"
  puts "  -h = print this message"
  puts "  -l = load existing files"
  puts "  -i = initialize dictionary"
end